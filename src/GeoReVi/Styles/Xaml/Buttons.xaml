<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:local="clr-namespace:GeoReVi"
                    xmlns:core="clr-namespace:GeoReVi;assembly=GeoReVi.Core">
    <ResourceDictionary.MergedDictionaries>
        <!---Order is important here, because resources can reference to each other
                e.g. if a button gets loaded before the color, the color attribute of the button can't find
                the color due to the missing dictionary-->
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
        <ResourceDictionary>
            <LinearGradientBrush x:Key="ButtonNormalBackground1" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="{StaticResource ForegroundLight}" Offset="0"/>
                <GradientStop Color="{StaticResource ForegroundLight}" Offset="0.5"/>
                <GradientStop Color="{StaticResource ForegroundLight}" Offset="0.95"/>
                <GradientStop Color="{StaticResource ApirsMediumGray}" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="{StaticResource BackgroundDarkSlateGray}" Offset="0"/>
                <GradientStop Color="{StaticResource BackgroundDarkSlateGray}" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ButtonNormalBackgroundHover" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="{StaticResource ApirsGray}" Offset="0"/>
                <GradientStop Color="{StaticResource ApirsGray}" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ButtonNormalBackgroundHover1" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="{StaticResource BackgroundVeryLight}" Offset="0" />
                <GradientStop Color="{StaticResource ApirsLightGray}" Offset=".5" />
                <GradientStop Color="{StaticResource ApirsLightGray}" Offset=".5" />
                <GradientStop Color="{StaticResource ApirsLightGray}" Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="ButtonTransparentBackground1" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="Transparent" Offset="0"/>
                <GradientStop Color="Transparent" Offset="0.5"/>
                <GradientStop Color="Transparent" Offset="0.5"/>
                <GradientStop Color="Transparent" Offset="1"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="GradientTopBottomBackground" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="{StaticResource ApirsGray}" Offset="0"/>
                <GradientStop Color="{StaticResource BackgroundVeryLight}" Offset="0.05"/>
                <GradientStop Color="{StaticResource BackgroundVeryLight}" Offset="0.85"/>
                <GradientStop Color="{StaticResource ApirsGray}" Offset="1"/>
            </LinearGradientBrush>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <!---Default button type-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"></Setter>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Background" Value="{StaticResource ButtonTransparentBackground1}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="MinWidth" Value="30"></Setter>
        <Setter Property="Margin" Value="10,3"></Setter>
        <Setter Property="Padding" Value="3"></Setter>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource ForegroundVeryDarkBrush}"
                            BorderThickness="0"
                            CornerRadius="5"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            >
                        <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonTransparentBackground1}"
                                                                        To="{StaticResource ButtonNormalBackground1}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackground1}"
                                                                        To="{StaticResource ButtonTransparentBackground1}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="textblock" Value="{StaticResource ForegroundLightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>

    <!---Default button type-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="NormalButtonStyle">
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"></Setter>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="MinWidth" Value="30"></Setter>
        <Setter Property="Margin" Value="10,3"></Setter>
        <Setter Property="Padding" Value="3"></Setter>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource ForegroundVeryDarkBrush}"
                            BorderThickness="1"
                            CornerRadius="7"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            >
                        <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   Margin="6,2"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackground}"
                                                                        To="{StaticResource ButtonNormalBackgroundHover}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackgroundHover}"
                                                                        To="{StaticResource ButtonNormalBackground}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!---Image button style-->
    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Background" Value="{StaticResource ButtonTransparentBackground1}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="MinWidth" Value="15"></Setter>
        <Setter Property="Margin" Value="10,1,10,1"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            CornerRadius="5"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            >
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{TemplateBinding ImageSource}"
                                   Stretch="Fill"
                                   Width="auto"
                                   Height="auto"
                                   MaxWidth="14"
                                   MaxHeight="14"
                                   Margin="3,0,3,0"/>
                            <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   SnapsToDevicePixels="True"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   />

                        </StackPanel>


                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonTransparentBackground1}"
                                                                        To="{StaticResource ButtonNormalBackgroundHover1}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackgroundHover1 }"
                                                                        To="{StaticResource ButtonTransparentBackground1}"/>
                                    <!--<ColorAnimation Storyboard.TargetName="textblock" 
                                                    Storyboard.TargetProperty="Foreground.Color" 
                                                    Duration="0:0:0.3" 
                                                    To="{StaticResource ForegroundLight}"/>-->
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="textblock" Value="{StaticResource ForegroundLightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!---Image button style-->
    <Style TargetType="{x:Type local:ImageButton}" x:Key="ImageButtonColored">
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground1}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="MinWidth" Value="25"></Setter>
        <Setter Property="Margin" Value="10,1,10,1"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            CornerRadius="5"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            >
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{TemplateBinding ImageSource}"
                                   Stretch="Fill"
                                   Width="auto"
                                   Height="auto"
                                   MaxWidth="17"
                                   MaxHeight="17"
                                   Margin="3,0,3,0"/>
                            <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   SnapsToDevicePixels="True"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   />

                        </StackPanel>


                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackground1}"
                                                                        To="{StaticResource ButtonNormalBackgroundHover1}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackgroundHover1}"
                                                                        To="{StaticResource ButtonNormalBackground1}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="textblock" Value="{StaticResource ForegroundLightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!---Navigation button base style-->
    <Style x:Key="NavButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"></Setter>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground1}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            Width="auto">
                        <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Center"
                                   Width="{TemplateBinding Width}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   />


                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackground1}"
                                                                        To="{StaticResource ButtonNormalBackgroundHover1}"/>
                                    <ColorAnimation Storyboard.TargetName="textblock" 
                                                    Duration="0:0:0.3" 
                                                    Storyboard.TargetProperty="Foreground.Color" 
                                                    To="{StaticResource ForegroundVeryDark}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <local:LinearGradientBrushAnimation Storyboard.TargetProperty="Background"
                                                                        Duration="0:0:0.3"
                                                                        From="{StaticResource ButtonNormalBackgroundHover1}"
                                                                        To="{StaticResource ButtonNormalBackground1}"/>
                                    <ColorAnimation Storyboard.TargetName="textblock" 
                                                    Storyboard.TargetProperty="Foreground.Color" 
                                                    Duration="0:0:0.3" 
                                                    To="{StaticResource ForegroundLight}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="textblock" Value="{StaticResource ForegroundLightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for main grid buttons-->
    <Style TargetType="{x:Type Button}" x:Key="MainButton">

        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"></Setter>
        <Setter Property="FontWeight" Value="DemiBold"></Setter>
        <Setter Property="Margin" Value="20"></Setter>
        <Setter Property="Padding" Value="4"></Setter>
        <Setter Property="Background" Value="{StaticResource BackgroundDarkSlateGrayBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="local:IsBusyProperty.Value" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource ForegroundVeryDarkBrush}"
                            BorderThickness="0.5"
                            CornerRadius="5"
                            Width="auto">
                        <Grid>
                            <TextBlock x:Name="textblock"
                                       HorizontalAlignment="Center"
                                       Width="{TemplateBinding Width}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontWeight="{TemplateBinding FontWeight}"
                                       Text="{TemplateBinding Content}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <!---The spinner icon in the text attribute is derived from the homepage https://fontawesome.com/v4.7.0/icons/-->
                            <Border Background="{StaticResource BackgroundDarkSlateGrayBrush}"
                                    Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}">
                                <fa:ImageAwesome Icon="Spinner"
                                                 Spin="True"
                                                 SpinDuration="2"
                                                 Foreground="{StaticResource ForegroundVeryDarkBrush}"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               MaxWidth="17"
                                               MaxHeight="17"
                                               Stretch="Fill">
                                
                                </fa:ImageAwesome>
                                
                            </Border>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border" Duration="0:0:0.3" Storyboard.TargetProperty="Background.Color" To="{StaticResource WordBlue}"/>
                                    <ColorAnimation Storyboard.TargetName="textblock" Duration="0:0:0.3" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)" To="{StaticResource ForegroundLight}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border" Duration="0:0:0.3" Storyboard.TargetProperty="Background.Color" To="{StaticResource BackgroundDarkSlateGray}"/>
                                    <ColorAnimation Storyboard.TargetName="textblock" Duration="0:0:0.3" Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" To="{StaticResource ForegroundVeryDark}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for hyperlinks-->
    <Style TargetType="{x:Type Button}" x:Key="HyperlinkButton">

        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"></Setter>
        <Setter Property="Margin" Value="20"></Setter>
        <Setter Property="Padding" Value="4"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="{StaticResource WordBlueBrush}"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource ForegroundMainBrush}"
                            CornerRadius="5"
                            Width="auto">
                        <TextBlock x:Name="textblock"
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Center"
                                   Width="{TemplateBinding Width}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="textblock" Duration="0:0:0.3" Storyboard.TargetProperty="Foreground.Color" To="{StaticResource ApirsMediumGray}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="textblock" Duration="0:0:0.3" Storyboard.TargetProperty="Foreground.Color" To="{StaticResource WordBlue}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <!---Hoverless Icon-->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- System Icon Button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Hoverless}" x:Key="SystemIconButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
    </Style>

    <!---Window control button-->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"></Setter>
        <Setter Property="Padding" Value="8"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}"></Setter>
        <Setter Property="Margin" Value="4,2,4,0"/>

        <!--Stretches the bottoms in x-direction-->
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.3"></ScaleTransform>
            </Setter.Value>
        </Setter>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Adds an Hover-Trigger-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundLightBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!---Windows close button-->
    <Style x:Key="WindowsCloseButton" TargetType="Button" BasedOn="{StaticResource WindowControlButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"></Setter>
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!---Style for a load button-->
    <Style TargetType="{x:Type Button}" x:Key="LoadButton" BasedOn="{StaticResource MainButton}">
        <Setter Property="local:IsBusyProperty.Value" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            CornerRadius="10"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">

                        <Grid>
                            <TextBlock Text="{TemplateBinding Content}" 
                                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <!---The spinner icon in the text attribute is derived from the homepage https://fontawesome.com/v4.7.0/icons/-->
                            <TextBlock Style="{StaticResource SpinningText}"
                                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <!---In WPF all animations should be introduced via a storyboard-->
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="{StaticResource WordBlue}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <!---In WPF all animations should be introduced via a storyboard-->
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="{ StaticResource BackgroundDarkSlateGray}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Control template for toggle button
    FROM https://www.codeproject.com/Articles/248112/Templating-WPF-Expander-Control-->
    <ControlTemplate x:Key="SimpleExpanderButtonTemp" 
             TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                           Grid.ColumnSpan="2"/>
                <Ellipse Name="Ellipse"
                         Grid.Column="0"
                         Stroke="White"
                         Width="15"
                         Height="15"
                         Margin="4,0"
                         HorizontalAlignment="Left"
                         VerticalAlignment="Center"
                         Fill="{StaticResource ApirsMediumGrayBrush}"
                         />
                <Image x:Name="Arrow"
                      Grid.Column="0"
                      Source="/GeoReVi;component\Media\Icons\Navigation\NotCollapsed.png"
                      Width="9"
                      Height="9"
                      Margin="8,0"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5">
                    <Image.RenderTransform>
                        <RotateTransform Angle="90"/>
                    </Image.RenderTransform>
                </Image>
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="1"
                                  Margin="4,0,0,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                            Storyboard.TargetProperty=
                                            "(Image.RenderTransform).(RotateTransform.Angle)"
                                            To="270"
                                            Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                             Storyboard.TargetProperty=
                                               "(Image.RenderTransform).(RotateTransform.Angle)"
                                             To="90"
                                             Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Control template for toggle button
    FROM https://www.codeproject.com/Articles/248112/Templating-WPF-Expander-Control-->
    <ControlTemplate x:Key="HorizontalExpanderButtonTemp" 
             TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="{TemplateBinding Background}"
                           Grid.ColumnSpan="2"/>
                <TextBlock x:Name="Arrow"
                      Grid.Column="0"
                           FontFamily="{StaticResource FontAwesome}"
                      Text="{StaticResource FontAwesomeBackward}"
                           Foreground="{StaticResource ForegroundLightBrush}"
                        FontSize="10"
                      Margin="4,0"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5">
                    <TextBlock.RenderTransform>
                        <RotateTransform Angle="180"/>
                    </TextBlock.RenderTransform>
                </TextBlock>
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="1"
                                  Margin="0,0,0,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Content"
                                  />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                            Storyboard.TargetProperty=
                                            "(TextBlock.RenderTransform).(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0:0:0.6"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                             Storyboard.TargetProperty=
                                               "(TextBlock.RenderTransform).(RotateTransform.Angle)"
                                             To="180"
                                             Duration="0:0:0.6"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Simple Expander Template-->
    <ControlTemplate x:Key="StretchyExpanderTemp" TargetType="{x:Type Expander}">
        <Border BorderBrush="Black"
                BorderThickness="0.1"
                Padding="5,1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <ToggleButton x:Name="ExpanderButton"
                      Grid.Row="0"
                      Template="{StaticResource SimpleExpanderButtonTemp}"
                      Content="{TemplateBinding Header}"
                      IsChecked="{Binding Path=IsExpanded, 
                                 RelativeSource={RelativeSource TemplatedParent}}"
                      Background="White"
                      OverridesDefaultStyle="True"
                      Padding="1.5,0">
                </ToggleButton>
                <ContentPresenter x:Name="ExpanderContent"
                          Grid.Row="1"
                          Visibility="Visible"
                          ClipToBounds="True">
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="0"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                             Storyboard.TargetProperty=
                                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="1"
                                             Duration="0:0:0.3"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                             Storyboard.TargetProperty=
                                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="0"
                                             Duration="0:0:0.3"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Simple Expander Template-->
    <ControlTemplate x:Key="HorizontalExpanderTemp" TargetType="{x:Type Expander}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="ExpanderButton"
                      Grid.Column="0"
                      Template="{StaticResource HorizontalExpanderButtonTemp}"
                      Background="{StaticResource ApirsMediumGrayBrush}"
                      Content="{TemplateBinding Header}"
                      IsChecked="{Binding Path=IsExpanded, 
                                 RelativeSource={RelativeSource TemplatedParent}}"
                            OverridesDefaultStyle="True"
                          VerticalAlignment="Stretch"
                          VerticalContentAlignment="Center"
                      Padding="0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                          Grid.Column="1"
                          Visibility="Visible">
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleX="0"/>
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                             Storyboard.TargetProperty=
                                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"
                                             To="1"
                                             Duration="0:0:0.6"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                             Storyboard.TargetProperty=
                                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"
                                             To="0"
                                             Duration="0:0:0.6"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Icon button -->
    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="25" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}"
                                           x:Name="textBlock"
                                       Focusable="False" 
                                           FontSize="{TemplateBinding FontSize}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource ApirsLightBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="Transparent" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>